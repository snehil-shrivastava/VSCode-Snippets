{
	"New Object": {
		"prefix": "_n",
		"body": [
		  "${1:Obj} ${2:x} = new ${1}();"
		],
		"description": "New Object"
	},
	"Public static void method": {
		"prefix": "_psvm",
		"body": [
			"${1:public } ${2:void} ${3:method}(${4}){\r",
			"${5:}return;\r",
			"}\r"
		],
		"description": "New Object"
	},
	"Get GCD of two numbers": {
		"prefix": "_gcd",
		"body": [
			"\r",
			"static int gcd(int a, int b) {\r",
			"   if (b == 0) {\r",
			"      return a;\r",
			"   }\r",
			"   return gcd(b, a % b);\r",
			"}\r",
		],
		"description": "Creates gcd method in java."
	},
	"For_Loop": {
        "prefix": "for",
        "body": [
          "for (int ${1:i} = ${2:0}; ${i} ${3: < n}; ${4:i++}) {",
          "\t$0",
          "}"
        ],
        "description": "For Loop"
  	},
	"Create java class": {
		"prefix": "_mc",
		"body": [
			"\r",
			"import java.io.*;\r",
			"import java.util.*;\r",
			"\r",
			"public class ${1:Main} {\r",
			"\r",
			"    public static void main(String[] args) throws FileNotFoundException {\r",
			"        FastReader fr = new FastReader();\r",
			"        \r",
			"    }\r",
			"\r",
			"\r",
			"}\r",
			"\r",
			"class FastReader {\r",
			"\r",
			"    BufferedReader br;\r",
			"    StringTokenizer st;\r",
			"\r",
			"    public FastReader() throws FileNotFoundException {\r",
			"        br = new BufferedReader(new InputStreamReader(System.in));\r",
			"    }\r",
			"\r",
			"    String next() {\r",
			"        while (st == null || !st.hasMoreElements()) {\r",
			"            try {\r",
			"                st = new StringTokenizer(br.readLine());\r",
			"            } catch (IOException e) {\r",
			"                e.printStackTrace();\r",
			"            }\r",
			"        }\r",
			"        return st.nextToken();\r",
			"    }\r",
			"\r",
			"    int nextInt() {\r",
			"        return Integer.parseInt(next());\r",
			"    }\r",
			"\r",
			"    long nextLong() {\r",
			"        return Long.parseLong(next());\r",
			"    }\r",
			"\r",
			"    double nextDouble() {\r",
			"        return Double.parseDouble(next());\r",
			"    }\r",
			"\r",
			"    String nextLine() {\r",
			"        String str = \"\";\r",
			"        try {\r",
			"            str = br.readLine();\r",
			"        } catch (IOException e) {\r",
			"            e.printStackTrace();\r",
			"        }\r",
			"        return str;\r",
			"    }\r",
			"}\r",
			""
		],
		"description": "Creates java main class with a fastreader."
	},
	"Point": {
		"prefix": "_point",
		"body": [
			"\r",
			"\r",
			"class Point extends java.awt.geom.Point2D {\r",
			"\r",
			"    public final int x, y;\r",
			"\r",
			"    public Point(int x, int y) {\r",
			"        this.x = x;\r",
			"        this.y = y;\r",
			"    }\r",
			"\r",
			"    @Override\r",
			"    public double getX() {\r",
			"        return x;\r",
			"    }\r",
			"\r",
			"    @Override\r",
			"    public double getY() {\r",
			"        return y;\r",
			"    }\r",
			"\r",
			"    boolean isOK(int n) {\r",
			"        if (x >= 1 && x <= n && y >= 1 && y <= n) {\r",
			"            return true;\r",
			"        }\r",
			"        return false;\r",
			"    }\r",
			"\r",
			"    @Override\r",
			"    public boolean equals(Object other) {\r",
			"        if (this == other) {\r",
			"            return true;\r",
			"        }\r",
			"\r",
			"        if (!(other instanceof Point)) {\r",
			"            return false;\r",
			"        }\r",
			"\r",
			"        Point otherPoint = (Point) other;\r",
			"        return otherPoint.x == x && otherPoint.y == y;\r",
			"    }\r",
			"\r",
			"    @Override\r",
			"    public int hashCode() {\r",
			"        int result = x;\r",
			"        result = 31 * result + y;\r",
			"        return result;\r",
			"    }\r",
			"\r",
			"    @Override\r",
			"    public void setLocation(double x, double y) {\r",
			"        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\r",
			"    }\r",
			"\r",
			"}"
		],
		"description": "Create hash point"
	},
	"Line": {
		"prefix": "_line",
		"body": [
			"\r",
			"    class Line {\r",
			"        int a, b, c;\r",
			"        \r",
			"        // ax + by + c = 0\r",
			"        Line(int a, int b, int c) {\r",
			"            this.a = a;\r",
			"            this.b = b;\r",
			"            this.c = c;\r",
			"        }\r",
			"\r",
			"        @Override\r",
			"        public boolean equals(Object o) {\r",
			"            if (this == o) {\r",
			"                return true;\r",
			"            }\r",
			"            if (!(o instanceof Line)) {\r",
			"                return false;\r",
			"            }\r",
			"            Line p = (Line) o;\r",
			"            return (a == p.a) && (b == p.b) && (c == p.c);\r",
			"        }\r",
			"\r",
			"        @Override\r",
			"        public int hashCode() {\r",
			"            return Objects.hash(a, b, c);\r",
			"        }\r",
			"\r",
			"        static Line genLine(int x1, int y1, int x2, int y2){\r",
			"            int A = (x1 - x2);\r",
			"            int B = (y1 - y2);\r",
			"            int g = gcd(A, B);\r",
			"\r",
			"            A = A / g;\r",
			"            B = B / g;\r",
			"            if (A < 0 || (A == 0 || B < 0)) {\r",
			"                A *= -1;\r",
			"                B *= -1;\r",
			"            }\r",
			"            int C = B * x2 - A * y2;\r",
			"            return new Line(A, B, C);\r",
			"        }\r",
			"\r",
			"        static Line genLine(Point p1, Point p2){\r",
			"            return genLine(p1.x, p1.y, p2.x, p2.y);\r",
			"        }\r",
			"        static int gcd(int a, int b) {\r",
			"           if (b == 0) {\r",
			"              return a;\r",
			"           }\r",
			"           return gcd(b, a % b);\r",
			"        }\r",
			"        \r",
			"\r",
			"        Point intersection(Line l) {\r",
			"            return new Point((c * l.b - l.c * b) / (l.a * b - a * l.b), (c * l.a - l.c * a) / (l.b * a - b * l.a));\r",
			"        }\r",
			"\r",
			"    }"
		],
		"description": "Create hash line"
	},
	"normal sieve": {
		"prefix": "_nsieve",
		"body": [
			"int n = 20;\r",
			"        boolean prime[]=new boolean[n / 2]; \r",
			"        Arrays.fill(prime, false); \r",
			"        \r",
			"        for (int i = 3 ; i * i < n; i += 2) \r",
			"        { \r",
			"            if (prime[i / 2] == false) \r",
			"                for (int j = i * i; j < n; j += i * 2) \r",
			"                    prime[j / 2] = true; \r",
			"        }"
		],
		"description": "Normal sieve to gentrate prime numbers... "
	},
	"Bitwise sieve": {
		"prefix": "_bsieve",
		"body": [
			"int n = 0;\r",
			"        int prime[] = new int[n/64 + 1]; \r",
			"       \r",
			"        for (int i = 3; i * i <= n; i += 2) { \r",
			"           if ((prime[i/64] & (1 << ((i >> 1) & 31)))==0) \r",
			"                for (int j = i * i, k = i << 1;  \r",
			"                                  j < n; j += k) \r",
			"                    prime[i/64] |= (1 << ((i >> 1) & 31));\r",
			"        } \r",
			"        \r",
			"        \r",
			"        for (int i = 3; i <= n; i += 2) {\r",
			"            if ((prime[i/64] & (1 << ((i >> 1) & 31)))==0) {\r",
			"                \r",
			"            }\r",
			"           \r",
			"        }"
		],
		"description": "Bitwise Sieve"
	}
}